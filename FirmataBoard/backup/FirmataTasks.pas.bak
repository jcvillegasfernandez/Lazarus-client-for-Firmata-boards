{unit firmatatasks;}

implementation


{ TFirmataTasks }
constructor TFirmataTasks.Create(AOwner: TComponent);
begin
  inherited;

  FFirmataBoard:= nil;
  FEnabled:=false;

  FOnEnabled:=nil;
  FOnDisabled:=nil;

  FOnTaskError:=nil;
  FOnQueryAllTask:=nil;
  FOnQueryTask:=nil;

  FTasks:=nil;
end;

destructor TFirmataTasks.Destroy();
begin
  inherited Destroy;
end;

procedure TFirmataTasks.setFirmataBoard(Board: TFirmataBoard);
begin
  if Assigned(Board) then
  begin
    FFirmataBoard:=Board;
    FFirmataBoard.FirmataTasks:=self;
  end;
  // TODO Assgin links
end;

procedure TFirmataTasks.setEnabled(State: Boolean);
begin
  if not Assigned(FFirmataBoard) then
    exit;

  if FEnabled = State then
     exit;

  if State and FFirmataBoard.Enabled then
  begin
    FEnabled:=True;
    if Assigned(FOnEnabled) then
      FOnEnabled(self);
  end
  else  // disable
  begin
    if Assigned(FOnDisabled) then
      FOnDisabled(self);
    FEnabled:=False;
  end;
end;

function TFirmataTasks.GetNextByte: Byte;
begin
   Result:=FFirmataBoard.GetNextByte;
end;

procedure TFirmataTasks.GetFirmataCommand(Sender: TObject; Command: Byte);
var
  ReadByte: byte;
  TaskID: byte;
  DataString: string;
  Time_ms: integer;
  Length: integer;
  Position: integer;
  TaskIDs: array of Byte;
begin
  TaskIDs:=nil;
  DataString:='';
  TaskID:=0;
  Time_ms:=0;
  Length:=0;
  Position:=0;

  case Command of
    {0  START_SYSEX              (0xF0)
    1  Scheduler Command        (0x7B)
    2  error_task Reply Command (0x08) or query_task Reply Command (0x0A)
    3  task id                  (0-127)
    4  time_ms bit 0-6
    5  time_ms bit 7-13
    6  time_ms bit 14-20
    7  time_ms bit 21-27
    8  time_ms bit 28-31 | (length bit 0-2) << 4
    9  length bit 3-9
    10 length bit 10-15 | (position bit 0) << 7
    11 position bit 1-7
    12 position bit 8-14
    13 position bit 15 | taskdata bit 0-5 << 1 [taskdata is optional]
    14 taskdata bit 6-12  [optional]
    15 taskdata bit 13-19 [optional]
    n  ... as many bytes as needed (don't exceed MAX_DATA_BYTES though)
    n+1  END_SYSEX              (0xF7) }
    ERROR_FIRMATA_TASK, QUERY_TASK_REPLY: begin // error_task Reply Command (0x08)
      ReadByte:=GetNextByte;
      if ReadByte <> END_SYSEX then
      begin
        TaskID:=ord(ReadByte);  // get task ID
        ReadByte:=GetNextByte;
        while ReadByte <> END_SYSEX do
        begin
          DataString:=DataString+chr(ReadByte);
          ReadByte:=GetNextByte;
        end;
        if system.Length(DataString)>0 then
        begin
          DataString:=FFirmataBoard.Decode7To8bit(DataString);  // decode 7 bits string
          Time_ms:=FFirmataBoard.StrByteToInt(Copy(DataString,1,4)); // first 32 bits, 4 bytes
          Length:=FFirmataBoard.StrByteToInt(Copy(DataString,5,2));  // next 16 bits, 2 bytes
          Position:=FFirmataBoard.StrByteToInt(Copy(DataString,7,2));  // next 16 bits, 2 bytes
          DataString:=Copy(DataString,9,system.Length(DataString)-8);  // Task Data
        end;

        if Command = QUERY_TASK_REPLY then
        begin
          if Assigned(FOnQueryTask) then
            FOnQueryTask(self, TaskID, Time_ms, Length, Position, DataString);
        end
        else // ERROR_TASK_REPLY
          if Assigned(FOnTaskError) then
            FOnTaskError(self, TaskID, Time_ms, Length, Position, DataString);
      end;
    end;
    {0  START_SYSEX          (0xF0)
    1  Scheduler Command    (0x7B)
    2  query_all_tasks Reply Command (0x09)
    3  taskid_1             (0-127) [optional]
    4  taskid_2             (0-127) [optional]
    n  ... as many bytes as needed (don't exceed MAX_DATA_BYTES though)
    n+1  END_SYSEX (0xF7)}
    QUERY_ALL_TASKS_REPLY: begin // query_all_tasks Reply Command (0x09)
      SetLength(TaskIDs,0);
      ReadByte:=GetNextByte;
      while ReadByte <> END_SYSEX do
      begin
        Setlength(TaskIDs,system.length(TaskIDs)+1);
        TaskIDs[system.length(TaskIDs)-1]:=ReadByte;
        ReadByte:=GetNextByte;
      end;
      if Assigned(FOnQueryAllTask) then
        FOnQueryAllTask(self, TaskIDs);
    end;
    else
    begin  // unknown Scheduler command, now read until end command
      ReadByte:=GetNextByte;
      while ReadByte <> END_SYSEX do
      begin
        DataString:=DataString+chr(ReadByte);
        ReadByte:=GetNextByte;
      end;
      FFirmataBoard.ComException(4, 'GetSchedulerCommands', Command);
    end;
  end;
end;

//
// SCHEDULER COMMANDS
//
{0  START_SYSEX          (0xF0)
 1  Scheduler Command    (0x7B)
 2  create_task command  (0x00)
 3  task id              (0-127)
 4  length LSB           (bit 0-6)
 5  length MSB           (bit 7-13)
 6  END_SYSEX            (0xF7) }
function TFirmataTasks.CreateTask(TaskID: Byte; Length: integer; write: Boolean=true): string;
var
  Exists: Boolean;
  i: integer;
begin
  Result:='';
  exists:=false;
  if TaskID > 127 then
  begin
    FFirmataBoard.ComException(5,'CreateTask', TaskID);
    exit;
  end;
  if Length > $3FFF then // 14 bits
  begin
    FFirmataBoard.ComException(6, 'CreateTask', TaskID);
    exit;
  end;
  for i:=0 to system.Length(FTasks)-1 do
  begin
    if FTasks[i].ID = TaskID then // task exists, clear data
    begin
      FTasks[i].Size:=Length;
      Exists:=true;
      break;
    end;
  end;
  if Not Exists then  // new task
  begin
    i:=system.Length(FTasks);
    SetLength(FTasks, i+1);
    FTasks[i].ID:=TaskID;
    FTasks[i].Data:='';
    FTasks[i].size:=Length;
  end;
  Result:=FFirmataBoard.SendSysEx(chr(SCHEDULER_DATA)+chr(CREATE_TASK)+chr(TaskID and $7F)+chr(Length and $7F)+chr((Length >> 7) and $7F), write);
end;
{0  START_SYSEX          (0xF0)
 1  Scheduler Command    (0x7B)
 2  delete_task command  (0x01)
 3  task id              (0-127)
 4  END_SYSEX            (0xF7)}
function TFirmataTasks.DeleteTask(TaskID: Byte; write: Boolean=true): string;
var
  i,j: integer;
  Exists: Boolean;
begin
  Result:='';
  exists:=false;
  if TaskID > 127 then
  begin
    FFirmataBoard.ComException(5,'DeleteTask', TaskID);
    exit;
  end;
  j:=Length(FTasks)-1; // last element
  for i:=0 to j do
  begin
    if FTasks[i].ID = TaskID then // exists
    begin
      FTasKs[i].ID:=FTasKs[j].ID;  // copy last element in this position
      FTasks[i].Data:=FTasks[j].Data;
      FTasks[i].size:=FTasks[j].size;
      SetLength(FTasks, j); // new size of array
      Exists:=True;
      break;
    end;
  end;
  if not exists then
  begin
    FFirmataBoard.ComException(22,'DeleteTask', TaskID);
    exit;
  end;
  Result:=SendSysEx(chr(SCHEDULER_DATA)+chr(DELETE_TASK)+chr(TaskID), write);
end;
{0  START_SYSEX          (0xF0)
1  Scheduler Command    (0x7B)
2  add_to_task command  (0x02)
3  task id              (0-127)
4  taskdata bit 0-6     [optional] task bytes encoded using 8 times 7 bit
                         for 7 bytes of 8 bit
5  taskdata bit 7-13    [optional]
6  taskdata bit 14-20   [optional]
n  ... as many bytes as needed (don't exceed MAX_DATA_BYTES though)
n+1  END_SYSEX          (0xF7)}
function TFirmataTasks.AddToTask(TaskID: Byte; Data7Bit: String; write: Boolean=true): string;
var
  i: integer;
  Exists: Boolean;
begin
  Result:='';
  exists:=false;
  if TaskID > 127 then
  begin
    FFirmataBoard.ComException(5,'AddToTask', TaskID);
    exit;
  end;
  for i:=0 to Length(FTasks)-1 do
  begin
    if FTasks[i].ID = TaskID then // exists
    begin
      Exists:=True;
      if Length(Data7bit) > (MAX_DATA_BYTES - 5) then
      begin
        FFirmataBoard.ComException(21,'AddToTask', Format('; %d bytes in task %d',[Length(Data7bit) + 5, TaskID]));
        exit;
      end;
      FTasks[i].Data:=FTasks[i].Data+Data7Bit;
      break;
    end;
  end;
  if not exists then
  begin
    FFirmataBoard.ComException(22,'AddToTask', TaskID);
    exit;
  end;

  Result:=SendSysEx(chr(SCHEDULER_DATA)+chr(ADD_TO_TASK)+chr(TaskID)+Data7Bit, write);
end;
{0  START_SYSEX          (0xF0)
 1  Scheduler Command    (0x7B)
 2  delay_task command   (0x03)
 3  time_ms bit 0-6      time_ms is of type long, requires 32 bit.
 4  time_ms bit 7-13
 5  time_ms bit 14-20
 6  time_ms bit 21-27
 7  time_ms bit 28-31
 8  END_SYSEX            (0xF7)}
function TFirmataTasks.DelayTask(Delay: integer; write: Boolean=true): string;    // use for internal task
var
   Data8Bit: string;
begin
  Data8Bit:=TFirmataTasks.IntToStrByte(Delay, 4);  // 4 byte, 32 bits
  Result:=SendSysEx(chr(SCHEDULER_DATA)+chr(DELAY_TASK)+TFirmataTasks.Encode8To7Bit(Data8bit), write);
end;
{0  START_SYSEX              (0xF0)
 1  Scheduler Command        (0x7B)
 2  schedule_task command    (0x04)
 3  task id                  (0-127)
 4  time_ms bit 0-6          time_ms is of type long, requires 32 bit.
 5  time_ms bit 7-13
 6  time_ms bit 14-20
 7  time_ms bit 21-27
 8  time_ms bit 28-31
 9  END_SYSEX                (0xF7)}
function TFirmataTasks.ScheduleTask(TaskID: Byte; Time: integer; write: Boolean=true): string;
var
   Data8Bit: string;
   i: integer;
   Exists: Boolean;
begin
  Result:='';
  exists:=false;
  if TaskID > 127 then
  begin
    FFirmataBoard.ComException(5,'ScheduleTask', TaskID);
    exit;
  end;
  for i:=0 to Length(FTasks)-1 do
  begin
    if FTasks[i].ID = TaskID then // exists
    begin
      Exists:=True;
      break;
    end;
  end;
  if not exists then
  begin
    FFirmataBoard.ComException(22,'ScheduleTask', TaskID);
    exit;
  end;

  Data8Bit:=IntToStrByte(Time, 4);  // 4 byte, 32 bits
  Result:=SendSysEx(chr(SCHEDULER_DATA)+chr(SCHEDULE_TASK)+chr(TaskID)+Encode8To7Bit(Data8bit), write);
end;
{0  START_SYSEX              (0xF0)
1  Scheduler Command        (0x7B)
2  query_all_tasks command  (0x05)
3  END_SYSEX                (0xF7) }
function TFirmataTasks.QueryAllTasks(write: Boolean=true): string;
begin
  Result:='';
  if Length(FTasks) = 0 then
  begin
    FFirmataBoard.ComException(23,'QueryAllTasks');
    exit;
  end;
  Result:=SendSysEx(chr(SCHEDULER_DATA)+chr(QUERY_ALL_TASKS), write);
end;
{0  START_SYSEX              (0xF0)
 1  Scheduler Command        (0x7B)
 2  query_task command       (0x06)
 3  task id                  (0-127)
 4  END_SYSEX                (0xF7) }
function TFirmataTasks.QueryTask(TaskID: Byte; write: Boolean=true): string;
var
  i: integer;
  Exists: Boolean;
begin
  Result:='';
  exists:=false;
  if TaskID > 127 then
  begin
    FFirmataBoard.ComException(5,'QueryTask', TaskID);
    exit;
  end;
  for i:=0 to Length(FTasks)-1 do
  begin
    if FTasks[i].ID = TaskID then // exists
    begin
      Exists:=True;
      break;
    end;
  end;
  if not exists then
  begin
    FFirmataBoard.ComException(22,'QueryTask', TaskID);
    exit;
  end;
  Result:=SendSysEx(chr(SCHEDULER_DATA)+chr(QUERY_TASK)+chr(TaskID), write);
end;
{0  START_SYSEX              (0xF0)
 1  Scheduler Command        (0x7B)
 2  scheduler reset command  (0x07)
 3  END_SYSEX                (0xF7)}
function TFirmataTasks.SchedulerReset(write: Boolean=true): string;
begin
   FTasks:=nil;
   Result:=SendSysEx(chr(SCHEDULER_DATA)+chr(SCHEDULER_RESET), write);
end;


end.

